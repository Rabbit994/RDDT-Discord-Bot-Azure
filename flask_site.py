#This module is to provide web interface for users to register. This module simply takes token generated by another application and matches up WG OpenID response then stores WGID in
#the database for RDDT_Teamspeak_Bot Module to interact with.

from flask import Flask, request, redirect, session
from flask_openid import OpenID
import re
#import MySQLdb
import Modules.CommonFramework as CommonFramework
import Modules.CosmosFramework as CosmosFramework

#Flask Setup
config = CommonFramework.RetrieveConfigOptions('registration')

app_id = config['app_id']
oid = OpenID()
app = Flask(__name__)
app.secret_key = config['app_secret']

port = 8080
wgid_handler = '/wgid/redirect'
response_message = 'Processing registration'
login_message = 'Please click here to log in with wargaming'
auth_url = '/wgid/auth'

min_battles = 0



@app.route(auth_url)
def landing_page():
    if 'token' not in request.values:
        return 'Invalid request'
    session['token'] = request.values['token']
    
    return "<a href='{}'>{}</a>".format(wgid_handler, login_message)

#Function that handles the redirecting to WG login page
@app.route(wgid_handler)
@oid.loginhandler
def oid_redirect():
    return oid.try_login('http://na.wargaming.net/id/')

#Function that handles the response logic. 
#Actions that happen:
#Check for World of Tanks Battles (minimum 1, should be editable by variable) (TODO later)
#if they meet battle requirement, set updated = 1, wgid = returned WGID, rank = friend, token = 00000000, use token to figure out which DISCORD ID user they are
#Display message "Thanks for registering"
#If WGID is already known, deny them registration and display message "See Administrator to register"

@oid.after_login
def respond_to_login(resp):
    url = resp.identity_url
    pattern = re.compile('\d{10}')
    wgid = pattern.search(url).group()
    token = session['token']
    print('User logged in with wgid {} and token {}.'.format(wgid, token))
    #Wargaming id is now wgid
    #Token passed in is now token
    
    #Starting Processing Code Block
    response_message = "Beginning processing<br/>"
    if len(token) != 8: #Greater then 8, someone is fucking with me
        response_message += "Token rejected <br/>"
    elif token == "00000000":
        response_message += "Token invalid. If you think this is incorrect, contact an Administrator <br/>"
    else:
        results = CosmosFramework.QueryItems('SELECT * FROM c WHERE c.wgtoken = "{0}"'.format(token),'users')
        wgidcheck = CosmosFramework.QueryItems('SELECT * FROM c WHERE c.wgid={0}'.format(wgid),'users')

        if not bool(results):
            response_message += "Unknown token"
        elif bool(wgidcheck):
            response_message += "You are already registered with the bot, please contact Rabbit for further assistance"
        else:
            results = results[0]
            results['wgid'] = int(wgid)
            results['server'] = 'NA'
            results['clan'] = None
            results['rank'] = None
            results['wgtoken'] = '00000000'
            CosmosFramework.ReplaceItem(results['_self'],results)
            response_message += "You have been added to database. Updater will process you in 15 minutes or less."
    
    #End Processing code block
    return '{} <br/><br/> Debug Info:  WGID: {}, Token: {}'.format(response_message,wgid,token) 


def launch(port=port, debug=False):
    app.config['SESSION_TYPE'] = 'filesystem'
    app.run(host='0.0.0.0', port=port, debug=debug, threaded=True)

if __name__ =='__main__':
    launch(debug=False)
