#This module is to provide web interface for users to register. This module simply takes token generated by another application and matches up WG OpenID response then stores WGID in
#the database for RDDT_Teamspeak_Bot Module to interact with.

from flask import Flask, request, redirect, session
from flask_openid import OpenID
import re
#import MySQLdb
import Modules.CommonFramework as CommonFramework
import Modules.CosmosFramework as CosmosFramework

mysqlcur = CommonFramework.SQLConn()

app = Flask(__name__)
app.secret_key='not_so_secret'

port = 8080
wgid_handler = '/wgid/redirect'
response_message = 'Rabbot has accepted your offering.'
login_message = 'Please click here to log in with wargaming'
auth_url = '/wgid/auth'

min_battles = 0

config = CommonFramework.RetrieveConfigOptions('registration')

app_id = config['app_id']
oid = OpenID()

@app.route(auth_url)
def landing_page():
    if 'token' not in request.values:
        return 'DANGIT RABBIT YOU BROKE IT'
    session['token'] = request.values['token']
    
    return "<a href='{}'>{}</a>".format(wgid_handler, login_message)

#Function that handles the redirecting to WG login page
@app.route(wgid_handler)
@oid.loginhandler
def oid_redirect():
    return oid.try_login('http://na.wargaming.net/id/')

#Function that handles the response logic. 
#Actions that happen:
#Check for World of Tanks Battles (minimum 1, should be editable by variable) (TODO later)
#if they meet battle requirement, set updated = 1, wgid = returned WGID, rank = friend, token = 00000000, use token to figure out which DISCORD ID user they are
#Display message "Thanks for registering"
#If WGID is already known, deny them registration and display message "See Administrator to register"

@oid.after_login
def respond_to_login(resp):
    url = resp.identity_url
    pattern = re.compile('\d{10}')
    wgid = pattern.search(url).group()
    token = session['token']
    print('User logged in with wgid {} and token {}.'.format(wgid, token))
    #Wargaming id is now wgid
    #Token passed in is now token
    
    #Starting Processing Code Block
    response_message = "Beginning processing<br/>"
    if len(token) != 8: #Greater then 8, someone is fucking with me
        response_message += "Token rejected <br/>"
    elif token == "00000000":
        response_message += "Token invalid. If you think this is incorrect, contact an Administrator <br/>"
    else:
        def existsInUsers(col, val):
            # unsecure af, but works while normal way doesn't?
            query = "SELECT * FROM users WHERE {}".format(col)
            query += " = %s"
            # print(query)
            mysqlcur.execute(query, (val,))
            ret = mysqlcur.fetchone()
            return ret is not None

        def checkUsers():
            mysqlcur.execute("SELECT * FROM users")
            ret = mysqlcur.fetchone()
            while ret is not None:
                print(ret)
                ret = mysqlcur.fetchone()

        # checkUsers()

        # Check if user is attempted to sign in
        if existsInUsers('wgtoken', token):
            #Check if user has already signed the WG account it
            if existsInUsers('wgid', wgid): 
                #So they had WGID in system before, these people fucking suck
                response_message += "This account has already been registered. If this is an issue, contact an Administrator to fix. <br/>"
            else:
                if min_battles != 0 & False: #Check for enough battles (TODO complete this)
                    response_message += "You do not have a sufficient number of WoT battles. Note: WG takes some time to update their information. Please try again later."
                #Token sanity check
                elif existsInUsers("wgtoken", token):
                    #Clear out token and prep for Cron job
                    cmd = "UPDATE users SET wgid = %s, wgtoken = '00000000', updated = 1 WHERE wgtoken = %s"
                    mysqlcur.execute(cmd, (wgid,token))
                    response_message += "You have been registered Please note it can take up to 15 minutes for Reddit Family Bot to process changes.<br/>"
                else:
                    #Should never reach here as token should get wiped. Most likely case is spam attempts by user. 
                    response_message += "ERROR HAS OCCURED. Please contact an Administrator and give him debug information. <br/>"
        else:
            response_message = "Your token is not found. Most likely you were already added to database, but the Bot is under high load. Please close this page and wait for Reddit Family Bot to catch up."
    
    #End Processing code block
    return '{} <br/><br/> Debug Info:  WGID: {}, Token: {}'.format(response_message,wgid,token) 


def launch(port=port, debug=False):
    app.config['SESSION_TYPE'] = 'filesystem'
    app.run(host='0.0.0.0', port=port, debug=debug, threaded=True)

if __name__ =='__main__':
    launch(debug=False)
